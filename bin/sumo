#!/usr/bin/env ruby

require File.dirname(__FILE__) + '/../lib/all'

Sumo::Config.connect

require 'thor'

class CLI < Thor
	desc "start [NAMES]", "start one or more servers"
	def start(*names)
		servers(*names) do |server|
			server.start
		end
	end

	desc "ssh [NAMES]", "ssh to a specified server or first available"
	def ssh(*names)
		servers(*names) do |server|
			server.reload
			server.wait_for_ssh
			server.connect_ssh
		end
	end

	desc "create NAME", "create a persistent server"
	def create(name)
		abort("Already a server named #{name}") if Sumo::Server.find_by_name(name) ## FIXME - this shold be in model validation
    Sumo::Server.create :name => name
	end

	desc "init [NAMES]", "init ec2 resources for a persistent server"
	def init(*names)
		servers(*names) do |server|
			server.init_resources
		end
	end

	desc "restart NAME", "restart a running server"
	def restart(*names)
		servers(*names) do |server|
			server.restart
		end
	end

	desc "stop [NAMES]", "stop a persistent server"
	def stop(*names)
		servers(*names) do |server|
			server.stop
		end
	end

	desc "destroy [NAMES]", "destroy a persistent server"
	def destroy(*names)
		servers(*names) do |server|
			server.destroy
		end
	end

	desc "info [NAMES]", "show server config"
	def info(*names)
		servers(*names) do |server|
			puts "#{server.name}:"
			server.volumes.each do |dev,vol_id|
				info = Sumo::Config.ec2.describe_volumes([vol_id])
				puts "	#{dev.to_s}:#{Sumo::Config.ec2.describe_volumes([vol_id])}"
			end
		end
	end

	desc "list", "list all servers"
	def list
		Sumo::Server.all.each do |s|
			printf "%-14s %-11s %-10s %-13s %-15s %-10s %s\n", s.name, s.state["instance_id"], s.instance_size, s.ami, s.ip, s.ec2_state, "#{s.volumes.keys.size} volumes"
		end
	end

	desc "console [NAMES]", "get console output for server or first available"
	def console(*names)
		servers(*names) do |server|
			if server.running?
				puts "Not running: #{server.name}"
			else
				puts server.console_output if server.running?
			end
		end
	end

	desc "volumes", "list all volumes"
	def volumes
		printf "%13s %6s %12s  %-10s %-16s %-16s\n", "AWS_ID", "SIZE", "AWS_STATUS", "AWS_DEVICE", "ATTACHED TO", "CONFIGURED FOR"
		printf "%s\n", ("-" * 80)
		Sumo::Config.ec2.describe_volumes.each do |volume|
			printf "%13s %6s %12s  %-10s %-16s %-16s\n", volume[:aws_id], volume[:aws_size], volume[:aws_status], volume[:aws_device], instance_id_to_sumo(volume[:aws_instance_id]) || volume[:aws_instance_id], volume_id_to_sumo(volume[:aws_id])
		end
	end

	desc "ips", "list all ips"
	def ips
		printf "%15s %20s %20s\n", "IP", "ATTACHED TO", "CONFIGURED FOR"
		printf "%s\n", ("-"*57)
		Sumo::Config.ec2.describe_addresses.each do |ip|
			printf "%15s %20s %20s\n", ip[:public_ip], instance_id_to_sumo(ip[:instance_id]) || ip[:instance_id], ip_to_sumo(ip[:public_ip])
		end
	end

	no_tasks do
		def servers(*names,&block)
			names = [ File.basename(File.expand_path(".")) ] if names.empty?
			Sumo::Server.search(*names).each do |server|
				begin
					block.call(server)
				rescue Object => e
					puts "Error on #{server.name}: #{e.message}"
				end
			end
		end

		def task(msg, &block)
			printf "---> %-24s ", "#{msg}..."
			start = Time.now
			result = block.call || 'done'
			result = "done" unless result.is_a? String
			finish = Time.now
			time = sprintf("%0.1f", finish - start)
			puts "#{result} (#{time}s)"
			result
		end

		def volume_id_to_sumo(volume)
      Sumo::Server.select(:first, :conditions => [ "volumes_flat like ?", "%#{volume}" ]) rescue nil
		end

		def ip_to_sumo(ip)
			Sumo::Server.find_by_elastic_ip(ip) rescue nil
		end

		def instance_id_to_sumo(instance_id)
			Sumo::Server.all.detect { |s| s.state["instance_id"] and s.state["instance_id"] == instance_id } rescue nil
		end
	end
end

CLI.start
