#!/usr/bin/env ruby

require File.dirname(__FILE__) + '/../lib/all'

Sumo::Config.connect

require 'thor'

class CLI < Thor
	desc "launch [NAMES]", "launch one or more servers"
	def launch(*names)
		Sumo::Server.search(*names).each do |inst|
			task("Launch server #{inst.name}")   { inst.start }
			task("Acquire hostname")             { inst.wait_for_hostname }
			task("Wait for ssh")                 { inst.wait_for_ssh }
			task("Attaching ip")                 { inst.attach_ip } if inst.elastic_ip
			task("Attaching volumes")            { inst.attach_volumes } if inst.has_volumes?
		end
	end

	desc "ssh [NAMES]", "ssh to a specified server or first available"
	def ssh(*names)
		Sumo::Server.search(*names).each do |inst|
			inst.refresh
			if inst.running?
				inst.wait_for_ssh
				inst.connect_ssh
			else
				puts "Server #{inst.name} not running"
			end
		end
	end

	desc "create NAME --opt1=value1 --opt2=value2", "create a persistent server"
	Sumo::Server.attrs.each do |a|
		method_option a, :type => :string, :default => nil, :required => false
	end
	def create(name)
		inst = Sumo::Server.find_by_name(name)
		abort("Already a server by that name") unless inst.nil?
		Sumo::Server.create options.merge(:name => name)
	end

	desc "restart [NAME]", "start a persistent server"
	def restart(*names)
		Sumo::Server.search(*names).each do |inst|
			task("Stopping server #{inst.name}") { inst.terminate } if inst.running?
			task("Starting server #{inst.name}") { inst.start }
		end
	end

	desc "stop [NAMES]", "stop a persistent server"
	def stop(*names)
		Sumo::Server.search(*names).each do |inst|
			if inst.running?
				task("Stopping server #{inst.name}") { inst.terminate } if inst.running?
			else
				puts "Server #{inst.name} not running"
			end
		end
	end

	desc "destroy NAME", "destroy a persistent server"
	def destroy(*names)
		Sumo::Server.search(*names).each do |inst|
			task("Stopping server #{inst.name}") { inst.terminate } if inst.running?
			task("Destroying server #{inst.name}") { inst.destroy }
		end
	end

	desc "set [NAMES] --opt1=value1 --opt2=value2", "set config var for an server"
	Sumo::Server.attrs.each do |a|
		method_option a, :type => :string, :default => nil, :required => false
	end
	def set(*names)
		Sumo::Server.search(*names).each do |inst|
			inst.update_attributes!(options)
		end
	end
		
	desc "info [NAMES]", "show server config"
	def info(*names)
		Sumo::Server.search(*names).each do |inst|
			puts "#{inst.name}:"
			inst.to_hash.each do |key,value|
				puts "	#{key.to_s}:#{value.to_s.inspect}"
			end
		end
	end

	desc "list [<NAMES>]", "list all servers"
	def list(*names)
		names = ["%"] if names.empty? ## search for all by defaul
		Sumo::Server.search(*names).each do |i|
			printf "%-14s %-11s %-10s %-13s %-15s %-10s %s\n", i.name, i.instance_id, i.instance_size, i.ami, i.elastic_ip || i.hostname, i.ec2_state, i.volumes_json
		end
	end

	desc "console [NAME]", "get console output for server or first available"
	def console(*names)
		Sumo::Server.search(*names).each do |inst|
			puts inst.console_output if inst.running?
		end
	end

	desc "volumes", "list all volumes"
	def volumes
		Sumo::Config.ec2.describe_volumes.each do |volume|
			printf "%-10s %-10s %-10s %-10s %-10s\n", volume[:aws_id], volume[:aws_size], volume[:aws_status], volume[:aws_device], instance_id_to_sumo(volume[:aws_instance_id])
		end
	end

	desc "ips", "list all ips"
	def ips
		Sumo::Config.ec2.describe_addresses.each do |ip|
			printf "%-10s %-10s\n", ip[:public_ip], instance_id_to_sumo(ip[:instance_id])
		end
	end

	desc "attach_ip NAME", "attach (and create if not specified) an IP to server"
	def attach_ip(name)
		inst = find_server(name)
		ip = Sumo::Config.ec2.allocate_address
		inst.add_ip(ip)
	end

	desc "attach_volume NAME (MEGABYTES | VOLUME) DEVICE", "creates an ec2 volume of the specified size"
	def attach_volume(name, vs, device)
		inst = find_running_server(name)
		vol = vs if vs =~ /^vol/
		vol ||= task("Create a #{vs}MB volume") { Sumo::Config.ec2.create_volume(nil, vs, inst.availability_zone)[:aws_id] }
		task("Add Volume to Server") { inst.add_volume(vol, device) }
	end

	desc "delete_volume VOLUME_ID", "deletes an ec2 volume"
	def delete_volume(volume)
		## FIXME - should also remove it from the volumes_json
		id = task("Deleting volume") { Sumo::Config.ec2.delete_volume(volume) }
	end

	desc "purge", "PURGE ALL DATA"
	def purge
		Sumo::Config.purge
	end

	desc "detach NAME VOLUME_ID", "detaches volume from server"
	def detach(name, volume)
		inst = find_server(name)
		task("Detaching #{volume}") { Sumo::Config.ec2.detach_volume(volume) }
	end

	desc "duplicate [NAME] [NEWNAME]", "duplicate named server to newname"
	def duplicate(name, newname)
		inst = Sumo::Server.search(name).first
		task("Duplicating #{inst}") do
			dupe = inst.duplicate(newname)
			dupe.save
		end
	end

	no_tasks do
		def find_idle_server(name)
			if name
				Sumo::Server.find_by_name(name) || abort("No such server")
			else
				Sumo::Server.find(:all).detect { |i| not i.running? } || abort("No idle servers")
			end
		end

		def find_running_server(name)
			if name
				Sumo::Server.find_by_name(name) || abort("No such server")
			else
				Sumo::Server.find(:all).detect { |i| i.running? } || abort("No running servers")
			end
		end

		def find_server(name)
			if name
				Sumo::Server.find_by_name(name) || abort("No such servers")
			else
				Sumo::Server.find(:all).first || abort("No servers")
			end
		end

		def task(msg, &block)
			printf "---> %-24s ", "#{msg}..."
			start = Time.now
			result = block.call || 'done'
			result = "done" unless result.is_a? String
			finish = Time.now
			time = sprintf("%0.1f", finish - start)
			puts "#{result} (#{time}s)"
			result
		end

		def instance_id_to_sumo(instance_id)
			result = "" if instance_id.nil?
			result ||= Sumo::Server.all.detect { |i| i.instance_id == instance_id }
			result ||= instance_id
		end
	end
end

CLI.start
