#!/usr/bin/env ruby

require File.dirname(__FILE__) + '/../lib/sumo'

require 'thor'

class CLI < Thor
	desc "launch [<role>]", "launch an instance as role, or omit to ssh to vanilla instance"
	def launch(role=nil)
		id = task("Launch instance") { sumo.launch }
		host = task("Acquire hostname") { sumo.wait_for_hostname(id) }
		task("Wait for ssh") { sumo.wait_for_ssh(host) }

		if role
			task("Bootstrap chef") { sumo.bootstrap_chef(host) }
			role.split(',').each do |role|
				task("Setup #{role}") { sumo.setup_role(host, role) }
			end
			puts
			display_resources(host)
		else
			puts "\nLogging you in via ssh.  Type 'exit' or Ctrl-D to return to your local system."
			puts '-' * 78
			connect_ssh(host)
		end
	end

	desc "ssh [<instance_id or hostname>]", "ssh to a specified instance or first available"
	def ssh(id=nil)
		inst = sumo.find(id) || sumo.running.first || abort("No running instances")
		hostname = inst[:hostname] || wait_for_hostname(inst[:instance_id])
		connect_ssh hostname
	end

	desc "resources [<instance_id or hostname>]", "show resources exported by an instance"
	def resources(id=nil)
		inst = sumo.find(id) || sumo.running.first || abort("No running instances")
		hostname = inst[:hostname] || wait_for_hostname(inst[:instance_id])
		display_resources(inst[:hostname])
	end

	desc "bootstrap", "bootstrap chef and cookbooks"
	def bootstrap(id=nil)
		inst = sumo.find(id) || sumo.running.first || abort("No running instances")
		task "Bootstrap chef" do
			sumo.bootstrap_chef(inst[:hostname])
		end
	end

	desc "role", "setup instance as a role"
	def role(role, id=nil)
		inst = sumo.find(id) || sumo.running.first || abort("No running instances")
		task "Setup #{role}" do
			sumo.setup_role(inst[:hostname], role)
		end
	end

	desc "list", "list running instances"
	def list
		sumo.list.each do |inst|
			printf "%-50s %-12s %s\n", inst[:hostname], inst[:instance_id], inst[:status]
		end
	end

	desc "console [<instance_id or hostname>]", "get console output for instance or first available"
	def console(id=nil)
		inst = sumo.find(id) || (sumo.running | sumo.pending).first || abort("No running or pending instances")

		puts sumo.console_output(inst[:instance_id]).inspect
	end

	desc "terminate [<instance_id or hostname>]", "terminate specified instance or first available"
	def terminate(id=nil)
		inst = sumo.find(id) || (sumo.running | sumo.pending).first || abort("No running or pending instances")

		sumo.terminate(inst[:instance_id])
		puts "#{inst[:hostname] || inst[:instance_id]} scheduled for termination"
	end

	desc "terminate_all", "terminate all instances"
	def terminate_all
		instances = (sumo.running | sumo.pending)
		abort("No running or pending instances") if instances.empty?
		instances.each do |inst|
			sumo.terminate(inst[:instance_id])
			puts "#{inst[:hostname] || inst[:instance_id]} scheduled for termination"
		end
	end

	desc "volumes", "list all volumes"
	def volumes()
	  sumo.volumes.each do |volume|
			id = volume["volumeId"]
			size = volume["size"]
			status = volume["status"]
			device = volume["attachmentSet"]["item"].first["device"] rescue ""
			instance = volume["attachmentSet"]["item"].first["instanceId"] rescue ""
			printf "%-10s %4s %10s %15s %15s\n", id, size, status, instance, device
		end
	end

	desc "create_volume [<megabytes>]", "creates an ec2 volume of the specified size"
	def create_volume(size="5")
		id = task("Create a #{size}MB volume") { sumo.create_volume(size) }
	end

	desc "delete_volume <volume_id>", "deletes an ec2 volume"
	def delete_volume(volume)
		id = task("Deleting volume") { sumo.delete_volume(volume) }
	end

	desc "attach <volume_id> <instance_id> <device>", "attaches volume to instance as device"
	def attach(volume, instance, device)
		task("Attaching #{volume} to #{instance} as #{device}") { sumo.attach(volume, instance, device) }
	end

	desc "detach <volume_id>", "detaches volume from instance"
	def detach(volume)
		task("Detaching #{volume}") { sumo.detach(volume).inspect }
	end

	no_tasks do
		def sumo
			@sumo ||= Sumo.new
		end

		def task(msg, &block)
			printf "---> %-24s ", "#{msg}..."
			start = Time.now
			result = block.call || 'done'
			finish = Time.now
			time = sprintf("%0.1f", finish - start)
			puts "#{result} (#{time}s)"
			result
		end

		def connect_ssh(hostname)
			sumo.wait_for_ssh(hostname)

			system "ssh -i #{sumo.keypair_file} root@#{hostname}"
			if $?.success?
				puts "\nType 'sumo terminate' if you're done with this instance."
			end
		end

		def display_resources(host)
			resources = sumo.fetch_resources(host)
			unless resources.empty?
				puts "Your instance is exporting the following resources:"
				resources.each do |resource|
					puts "  #{resource}"
				end
			end
		end
	end
end

CLI.start
